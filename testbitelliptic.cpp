#include <panic.h>
#include <bignat.h>
#include <bigint.h>
#include <bitelliptic.h>
#include <progress.h>
#include <platform.h>
#include <serial.h>
#include <test.h>

extern "C" void FAIL(const char *msg);


void testAddressGen(uint8_t PRIVATE[32],uint8_t ex[32],uint8_t ey[32]){
  WORD pbuf[BIGNATBUFSIZE(32)];
  WORD gxbuf[BIGNATBUFSIZE(32)];
  WORD gybuf[BIGNATBUFSIZE(32)];
  
  struct bigint P(pbuf,sizeof(pbuf)/__S);
  struct bigint Gx(gxbuf,sizeof(gxbuf)/__S);
  struct bigint Gy(gybuf,sizeof(gybuf)/__S);
  P.SetBytesP(__P,sizeof(__P));
  
  Gx.SetBytesP(_Gx,sizeof(_Gx));
  Gy.SetBytesP(_Gy,sizeof(_Gy));
  
  struct bitcurve S256(P,Gx,Gy);

  WORD xbuf[BIGNATBUFSIZE(32)];
  WORD ybuf[BIGNATBUFSIZE(32)];
  struct bigint pubx(xbuf,sizeof(xbuf)/__S);
  struct bigint puby(ybuf,sizeof(ybuf)/__S);

  S256.ScalarBaseMult(PRIVATE,32,pubx,puby);

  int oncurve = S256.isOnCurve(pubx,puby);
  if( !oncurve ){
    FAIL("NOT ON CURVE");
  }

  WORD checkBuf[32];
  struct bigint check(checkBuf,sizeof(checkBuf));
  check.SetBytes(0,ex,32);
  
  if( check.Cmp(pubx) != 0){
    FAIL("PUB X");
  }

  check.SetBytes(0,ey,32);
  if( check.Cmp(puby) != 0){
    FAIL("PUB y");
  }

}

void testBitElliptic(){

  serialprint("testBitElliptic");
  uint8_t a[]={0x18,0xE1,0x4A,0x7B,0x6A,0x30,0x7F,0x42,0x6A,0x94,0xF8,0x11,0x47,0x01,0xE7,0xC8,0xE7,0x74,0xE7,0xF9,0xA4,0x7E,0x2C,0x20,0x35,0xDB,0x29,0xA2,0x06,0x32,0x17,0x25};

  uint8_t ex[]={0x50,0x86,0x3A,0xD6,0x4A,0x87,0xAE,0x8A,0x2F,0xE8,0x3C,0x1A,0xF1,0xA8,0x40,0x3C,0xB5,0x3F,0x53,0xE4,0x86,0xD8,0x51,0x1D,0xAD,0x8A,0x4,0x88,0x7E,0x5B,0x23,0x52};
  uint8_t ey[]={0x2C,0xD4,0x70,0x24,0x34,0x53,0xA2,0x99,0xFA,0x9E,0x77,0x23,0x77,0x16,0x10,0x3A,0xBC,0x11,0xA1,0xDF,0x38,0x85,0x5E,0xD6,0xF2,0xEE,0x18,0x7E,0x9C,0x58,0x2B,0xA6};

  testAddressGen(a,ex,ey);
}

